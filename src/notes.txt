Class --> Class is a blueprint. It is a collection of variables and methods.
Variables --> Define the state
Method --> Define the behaviour

Any class which is not belongs to java.lang or same package then we have to import it explicitly.

constructor -- > force to provide information at the time of initalization of class.
this.name = name (this represents the current class)
---------------------------------------------------------------------------------------------

constructor & overloading constructor
method & overloading method
variables:
---------
Global variables --> Scoop of the variable is available throughout the class

1.) Instance variable(non static)
2.) Class variable (static variable)

static method or variable can called via class name
static variable can be constant by making final key and variables name should be upper case e.g. final static NUM_EYES = 2;

Local variables --> Scoop of the variable is limited to the method or constructor

----------------------------------------------------------------------------------------------------------
The this keyword :-
this is a keyword in Java which is used as a reference to the object of the current class, with in an instance method or a constructor.
Using this you can refer the members of a class such as constructors, variables and methods.

Note − The keyword this is used only within instance methods or constructors

This
In general, the keyword this is used to − Differentiate the instance variables from local variables if they have same names,
within a constructor or a method.
-------------------------------------------------------------------------------------------------------------------------------------
Four Access Modifiers in Java
-----------------------------
private --> can only be used within the same class they are defined
<default> --> can only be use in the same package
protected --> within the package + outside the package for subclasses (parent child relationship)
public --> can be use anywhere in the module


You can apply this to class/constructor/method/variable

Encapsulation --> Encapsulation in Java is a mechanism of wrapping the data (variables) and code acting on the data (methods)
                  together as a single unit. In encapsulation, the variables of a class will be hidden from other classes,
                  and can be accessed only through the methods of their current class. Therefore, it is also known as data hiding.

                  To achieve encapsulation in Java −
                  ------------------------------------
                  Declare the variables of a class as private.
                  Provide public setter and getter methods to modify and view the variables values.
--------------------------------------------------------------------------------------------------------------------------------------
Class Object --> is the root of the class hierarchy. Every Class has Object as a superclass.
                 All objects, including arrays, implement the methods of this class.

               e.g. java.lang.Object <--- Phone <--- MobilePhone

@override annotation is validating the implemented method has the same name and parameters.
--> When overriding the child class can increase the level of access and also use he same level of access, but cannot decrease, that means
protected method in parent call & protected or public method in child class.
Note:- Multiple inheritance is not allowed in Java. Class can have only one direct parent.
-------------------------------------------------------------------------------------------------------------------------------------

